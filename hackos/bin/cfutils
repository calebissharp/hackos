#!/usr/bin/env python3
import argparse
import time
import sys
import yaml
from tabulate import tabulate

hosts_file = open('/bin/hackos/cfutils.yml', 'r')
hosts = yaml.safe_load(hosts_file)

def httpcrack(hostname, port):
    host = hosts[hostname]
    print('Connecting to {}:{}...'.format(hostname, port))
    time.sleep(1)
    if host and host['ports']['80']:
        if not host['firewall']:
            print('Connection established.')
            time.sleep(0.5)
            print('Waiting for handshake...')
            time.sleep(0.5)
            print('Decrypting hash...')
            time.sleep(0.5)
            print('Elevating authorization level...')
            time.sleep(0.5)
            print('Navigating filesystem...')
            time.sleep(1)
            print('Reading server.log:')
            time.sleep(0.5)
            print('')
            print(host['ports']['80']['log'])
            print('')
        else:
            print('Cannot connect to port {}. Maybe there is a firewall?'.format(port))
    else:
        print('Error establishing connection.')

def pscan(hostname):
    if hostname:
        print('Connecting to {}...'.format(hostname))
        time.sleep(1)
        if hostname in hosts:
            print('Connected!')
            print('Running port scan...')
            print('')
            time.sleep(1)
            if hosts[hostname]['firewall']:
                print('Warning: Firewall detected')
                print('')
                time.sleep(1)
            headers_list = ['PORT', 'STATE', 'SERVICE']
            data = [ [d['number'], d['state'], d['service']] for d in [port[1] for port in hosts[hostname]['ports'].items()] ]
            print(tabulate(data, headers=['PORT', 'STATE', 'SERVICE'], tablefmt='plain'))
            print('')
            print('Scan complete.')
        else:
            print('Error: Could not create connection to {}.'.format(hostname))

def firefighter(hostname):
    host = hosts[hostname]
    if host['firewall']:
        time.sleep(1)
        hosts[hostname]['firewall'] = False
        print('Firewall disabled')
    else:
        print('No firewall to disable!')

def sshcrack(hostname, port):
    host = hosts[hostname]
    print('Connecting to {}:{}...'.format(hostname, port))
    time.sleep(1)
    if host and host['ports']['22']:
        if not host['firewall']:
            print('Connection established.')
            time.sleep(0.5)
            print('Waiting for handshake...')
            time.sleep(0.5)
            print('Decrypting hash...')
            time.sleep(0.5)
            print('Elevating authorization level...')
            time.sleep(0.5)
            print('Navigating filesystem...')
            time.sleep(1)
            print('Reading /etc/ssh/ssh.log:')
            time.sleep(0.5)
            print('')
            print(host['ports']['22']['log'])
            print('')
        else:
            print('Cannot connect to port {}. Maybe there is a firewall?'.format(port))
    else:
        print('Error establishing connection.')

def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='subparser')

    parser_pscan = subparsers.add_parser('pscan', description='connect to another machine')
    parser_pscan.add_argument('hostname', type=str, help='hostname to connect to')

    parser_httpcrack = subparsers.add_parser('httpcrack')
    parser_httpcrack.add_argument('hostname', type=str, help='host to crack')
    parser_httpcrack.add_argument('-p', '--port', default=80, help='port that http server is running on')

    parser_sshcrack = subparsers.add_parser('sshcrack')
    parser_sshcrack.add_argument('hostname', type=str, help='host to crack')
    parser_sshcrack.add_argument('-p', '--port', default=22, help='port that ssh server is running on')

    parser_firefighter = subparsers.add_parser('firefighter')
    parser_firefighter.add_argument('hostname', type=str, help='host with firewall')

    try:
        kwargs = vars(parser.parse_args())
        globals()[kwargs.pop('subparser')](**kwargs)
    except KeyError as e:
        print(e)
        parser.print_help()

if __name__ == '__main__':
    main()
    hosts_file.close()
    with open('/bin/hackos/cfutils.yml', 'w') as h:
        h.write(yaml.dump(hosts, default_flow_style=False))
